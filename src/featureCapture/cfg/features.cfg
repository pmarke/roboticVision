#!/usr/bin/env python

PACKAGE = "feature_capture"

import cv2

from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

cornerHarris = gen.add_group("Corner Harris")

gftt = gen.add_group("Good Features To Trak")

fast=gen.add_group("Fast and Accelerated Segment Test")

feature_detection_algorithms = gen.enum([gen.const("CORNER_HARRIS", int_t, 0,""),
										gen.const("GOOD_FEATURES_TO_TRACK",int_t,1,""),
										gen.const("FAST_AND_ACCELERATED_SEGMENT_TEST",int_t,2,"")],"Feature Detection Algorithms")

fast_type = gen.enum([gen.const("TYPE_5_8" ,int_t,cv2.FAST_FEATURE_DETECTOR_TYPE_5_8,""),
					  gen.const("TYPE_7_12",int_t,cv2.FAST_FEATURE_DETECTOR_TYPE_7_12,""),
					  gen.const("TYPE_9_16",int_t,cv2.FAST_FEATURE_DETECTOR_TYPE_9_16,"")
					  ],
					  "Neighborhood Types")

# name, type, value, description
ksize_enum = gen.enum([gen.const("1", int_t,1,""),
					   gen.const("3",int_t,3,""),
					   gen.const("5",int_t,5,""),
					   gen.const("7",int_t,7,"")],"ksize")

border_type_enum = gen.enum([gen.const("BORDER_CONSTANT",int_t,cv2.BORDER_CONSTANT,"iiiiii|abcdefgh|iiiiiii"),
							 gen.const("BORDER_REPLICATE",int_t,cv2.BORDER_REPLICATE,"aaaaaa|abcdefgh|hhhhhhh"),
							 gen.const("BORDER_REFLECT",int_t,cv2.BORDER_REFLECT,"fedcba|abcdefgh|hgfedcb"),
							 gen.const("BORDER_WRAP",int_t,cv2.BORDER_WRAP,"cdefgh|abcdefgh|abcdefg"),
							 gen.const("BORDER_REFLECT_101",int_t,cv2.BORDER_REFLECT_101,"gfedcb|abcdefgh|gfedcba"),
							 gen.const("BORDER_DEFAULT",int_t,cv2.BORDER_DEFAULT,"")],"borderType")


gen.add("algorithms", int_t,0,"Type of feature detection algorithm", 0,0,2, edit_method=feature_detection_algorithms)


# CornerHarris Parameters
cornerHarris.add("ch_blockSize", int_t, 0, "neighborhood size: block_size X block_size (pixels)", 3, 1, 100)
cornerHarris.add("ch_ksize",int_t,0,"size of the extended sobel kernel",1,1,7,edit_method=ksize_enum)
cornerHarris.add("ch_k",double_t, 0, "Harris detector free parameter", 0.05, 0.01, 1)
cornerHarris.add("ch_borderType",int_t,0,"Pixel extrapolation method to create pixels",cv2.BORDER_DEFAULT,0,4,edit_method=border_type_enum)
cornerHarris.add("ch_threshold",int_t,0,"For the corner to be displayed, it must pass this threshold", 150, 0, 250)


# Good Features to Track Parameters
gftt.add("gftt_maxCorners", int_t, 0, "Max number of features that will be trakec",25,1,50)
gftt.add("gftt_qualityLevel", double_t, 0, "Minimal accepted quality of image corners", 0.01,0.0001,10)
gftt.add("gftt_minDistance", double_t, 0, "Minimum possible Euclidean distance between the returned corners (pixels)",1,1,100)
gftt.add("gftt_blockSize", int_t,0,  "neighborhood size: block_size X block_size (pixels)", 3,1,100)
gftt.add("gftt_useHarrisDetector", bool_t,0,"Use cornerHarris() or cornerMinEigenVal()", True)
gftt.add("gftt_k",double_t, 0, "Harris detector free parameter", 0.05, 0.01, 1)

# Fast and Accelerated Segment Test
fast.add("fast_threshold", int_t,0,"Threshold on difference between intensity of the central pixel and pixels of a cirlce around this pixel.",10,0,250 )
fast.add("fast_nonmaxSupression",bool_t,0,"if true, non-maximum suppression is applied to detected corners",True)
fast.add("fast_types",int_t, 0, "Neighborhood type", cv2.FAST_FEATURE_DETECTOR_TYPE_9_16,0,2, edit_method=fast_type)




exit(gen.generate(PACKAGE, "feature_node", "featureDetectionAlgorithm" ))